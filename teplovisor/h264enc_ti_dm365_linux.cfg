/*
 *  Copyright 2008 by Texas Instruments Incorporated.
 *
 *  All rights reserved. Property of Texas Instruments Incorporated.
 *  Restricted rights to use, duplicate or disclose this code are
 *  granted through contract.
 *
 */

/*
 *  ======== ires_algorithm.cfg ========
 */
var GTINFRA = xdc.useModule("ti.sdo.fc.utils.gtinfra.GTINFRA");
GTINFRA.runtimeEnv = GTINFRA.NONE;

var GT = xdc.useModule("ti.sdo.utils.trace.GT");
GT.MALLOCFXN = "myMalloc";
GT.PRINTFXN = "printfCaller";

var Platform = xdc.useModule('ti.platforms.evmDM365.Platform');
        var obj = new Platform.Memory;
         obj.name = "VECS";
         obj.base = 0x00000004;
         obj.len = 0x000000FB;

/*
var Memory = xdc.useModule('xdc.platform.IPlatform');
override config Memory.customMemoryMap = [
        ["DDR2",  {name: "DDR2",  base: 0x80000000, len: 0x8000000}],
    ["IRAM1", {name: "IRAM1", base: 0x4000, len: 0x4000}],
    DRAM0 (RW) : org = 0x10000, len = 0x4000
    DRAM1 (RW) : org = 0x14000, len = 0x4000
    DDR2 : org = 0x80000000, len = 0x8000000
    VECS : org = 0x00000004, len = 0x000000FB
    ITCM : org = 0x00000100, len = 0x00003F00
    ];
*/


var Program = xdc.useModule('xdc.cfg.Program');
/*
    Program.heap = 0x800000;
    Program.stack = 0x2800;
    Program.sectMap[".text"] = "DDR2";
    Program.sectMap[".stack"] = "DDR2";
    Program.sectMap[".far"] = "DDR2";
    Program.sectMap[".switch"] = "DDR2" 
    Program.sectMap[".tables"] = "DDR2";
    Program.sectMap[".data"] = "DDR2";
    Program.sectMap[".bss"] = "DDR2";
    Program.sectMap[".sysmem"] = "DDR2";
    Program.sectMap[".cinit"] = "DDR2";
    Program.sectMap[".const"] = "DDR2";
    Program.sectMap[".cio"] = "DDR2" 
    Program.sectMap[".input_buffer"] = "DDR2";
    Program.sectMap[".display_buffer"] = "DDR2";
    Program.sectMap[".ref_buffer"] = "DDR2";
    Program.sectMap[".outBuffer"] = "DDR2";
    Program.sectMap[".ext_mem"] = "DDR2";
    Program.sectMap[".sstack"] = "DDR2";
    Program.sectMap[".fstack"] = "DDR2";
    Program.sectMap[".mmutable"] = "DRAM1";
*/
//    Program.linkTemplate = '../../build/arm926/cmd/h264vdec_ti_arm926.xdt';
/*
    Program.sectMap[".vectors"] = "VECS";
    Program.sectMap[".handler"] = "IRAM0";
    Program.sectMap[".intvecs"] = "VECS";
*/

/*
 * For alg_alloc, create and delete functions 
 */ 
xdc.loadPackage("ti.sdo.fc.utils.api");

/*
 * Configure the RMAN to be used 
 */ 
var RMAN = xdc.useModule('ti.sdo.fc.rman.RMAN');
    RMAN.useDSKT2 = false;
    RMAN.persistentAllocFxn = "__ALG_allocMemory" ;
    RMAN.persistentFreeFxn = "__ALG_freeMemory" ;
    RMAN.trace = true;
    RMAN.tableSize = 10;
    RMAN.semCreateFxn = "Sem_create";  
    RMAN.semDeleteFxn = "Sem_delete";  
    RMAN.semPendFxn = "Sem_pend";  
    RMAN.semPostFxn = "Sem_post";  
    RMAN.trace = false;
    RMAN.debug = false;

/* Configure packages corresponding to the IRES resources that the algorithm
   needs */
var EDMA3CHAN = xdc.useModule('ti.sdo.fc.ires.edma3chan.EDMA3CHAN');
    EDMA3CHAN.trace = false
    EDMA3CHAN.debug = false;

/* When EDMA3 resources are required, configure the fc.edma3 Meta-config module
 */
var EDMA3 = xdc.useModule('ti.sdo.fc.edma3.Settings');
    EDMA3.globalInit = true;
    EDMA3.maxQdmaChannels = [10,10,10,10];
    EDMA3.debug = false;
    EDMA3.trace = false;

var HDVICP = xdc.useModule('ti.sdo.fc.ires.hdvicp.HDVICP');
    HDVICP.debug = true;
    HDVICP.trace = true;

var ADDRSPACE = xdc.useModule('ti.sdo.fc.ires.addrspace.ADDRSPACE');
  
var VICP = xdc.useModule('ti.sdo.fc.ires.vicp.VICP2');
    VICP.debug = false;
    VICP.trace = false;
var VICP = xdc.useModule('ti.sdo.fc.memutils.MEMUTILS');
    VICP.noLib = false;
    VICP.noOS = false;

var HDVICPSYNC = xdc.useModule('ti.sdo.fc.hdvicpsync.HDVICPSYNC');
    HDVICPSYNC.debug = true;
    HDVICPSYNC.trace = true;

var MEMTCM = xdc.useModule('ti.sdo.fc.ires.memtcm.MEMTCM');
MEMTCM.cmemBlockId = 1; //Since we use _1 in our insmod command.

xdc.loadPackage("ti.sdo.fc.hdvicpsync");
/* This package provides mock implementation of Locks and Semaphores */ 
var osalGlobal = xdc.useModule('ti.sdo.ce.osal.Global');
if (Program.build.target.os == "Linux") {
    print("This is a LINUX OS");
    var os = xdc.useModule('ti.sdo.ce.osal.linux.Settings');
    osalGlobal.os = os;
    var ipcSettings = xdc.useModule('ti.sdo.ce.ipc.Settings');
    ipcSettings.ipc = xdc.useModule('ti.sdo.ce.ipc.linux.Ipc');
    xdc.loadPackage("ti.sdo.linuxutils.cmem");
}
xdc.useModule('ti.sdo.fc.global.Settings').osalPackage = "ti.sdo.ce.osal.linux";

/* var EX = xdc.useModule("ti.sdo.fc.rman.examples.EXAMPLE");
EX.debug = false; */
 /*Debug Trace on globally*/
/*xdc.useModule("ti.sdo.fc.global.Settings").profile = "debug_trace";*/

/*
 *  @(#) h264vdecTestApp; 1, 0, 0,73; 7-16-2008 18:38:26; /db/atree/library/trees/fc-f19x/src/
 */

